# -*- coding: utf-8 -*-
"""yulu

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sS2QBjCLCWCTdFp_tFzU-M0Ac62GO8ot

## PROBLEM STATEMENT

How diffrent Factors like season ,weather, working days,atmosphereic condition  etc affecting the rent of YULU bicycle

## INSIDES

1. Shape of data set is (10886, 12)

2. Data set dosenot contain any null values

3. casual, registered and count somewhat looks like Log Normal Distrinution

4. temp, atemp and humidity looks like they follows the Normal Distribution

5. windspeed follows the binomial distribution

6. Looks like humidity, casual, registered and count have outliers in the data.

7. Data looks common as it should be like equal number of days in each season, more working days and weather is mostly Clear, Few clouds, partly cloudy, partly cloudy.

8. In summer and fall seasons more bikes are rented as compared to other seasons.

9. Whenever its a holiday more bikes are rented.
It is also clear from the workingday also that whenever day is holiday or weekend, slightly more bikes were rented.

10. Whenever there is rain, thunderstorm, snow or fog, there were less bikes were rented.

11. Whenever the humidity is less than 20, number of bikes rented is very very low.

12. Whenever the temperature is less than 10, number of bikes rented is less.

13. Whenever the windspeed is greater than 35, number of bikes rented is less.

14. **chi-square test result to check whether season or wheather is depedent or not** 

  degrees of freedom:  9

  chi-square test statistic:  44.09441248632364

  critical value: 16.918977604620448

  p-value: 1.3560001579371317e-06

  Since p-value is less than the alpha 0.05, We reject the Null Hypothesis. Meaning that    Weather is dependent on the season.

15. **t-test result to chech whether working days has any effect on rent of bicycle or not**

  t_test statistics is : -1.2096277376026694

  p_value is : 0.22644804226361348

  Fail to reject null hypothisis ie Working day has no effect on the number of cycles being rented

16. **kruskal test result to check whether rent on bicycle depend on wheather**

  kruskal statistics is : 205.00216514479087

  p_value is 3.501611300708679e-44 

  Reject the Null Hypothisis ie  Number of cycles rented is not similar in different weather

17. **kruskal test result to check whether rent on bicycle depend on season**

  k_stat is : 699.6668548181988

  p_value is : 2.479008372608633e-151

  Reject the Null Hypothisis ie  Number of cycles rented is not similar in different season

18. **SPEARMAN RANK CORRELATION TEST RESULT**

  Rented bicycle is mostly correlated with temp and atemp

19. MEDIAN TEMP 20.5

20. MEDIAN ATEMP 24.2

## RECOMANDATION

1. In summer and fall seasons the company should have more bikes in stock to be rented. Because the demand in these seasons is higher as compared to other seasons.

2. With a significance level of 0.05, workingday has no effect on the number of bikes being rented so sufficient bikes in stoks in working days also.

3. In very low humid days, company should have less bikes in the stock. 

4. Whenever temprature is less than 10 or in very cold days, company should have less bikes. 

5. Whenever the windspeed is greater than 35 or in thunderstorms, company should have less bikes in stock to be rented.

6. As  more number of register user are there so suscription model may benificial.

7. To increase the demand in the weekend give some kind of discount in weekend.

8. Whenever there is rain, thunderstorm, snow or fog, there were less bikes were rented so company need to cut down its stocks in rainy season.

9. During rainy season company need to give some discount so that demand rises.

10. company may give some reward for premium members so that there are sufficient amount of demand for premium mambership.

11. for further expantion of bussiness need to target those area where wheather is fearly clean and rainfall is low
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

df=pd.read_csv("https://d2beiqkhq929f0.cloudfront.net/public_assets/assets/000/001/428/original/bike_sharing.csv?1642089089")
df

df.shape

df.info()

df.nunique(axis=0)

df.isnull().sum()

df['datetime'] = pd.to_datetime(df['datetime'])

cat_cols= ['season', 'holiday', 'workingday', 'weather']
for col in cat_cols:
    df[col] = df[col].astype('object')

df.iloc[:, 1:].describe(include='all')

# minimum datetime and maximum datetime
df['datetime'].min(), df['datetime'].max()

# number of unique values in each categorical columns
df[cat_cols].melt().groupby(['variable', 'value'])[['value']].count()

"""## DISTRIBUTION OF DIFFRENT FEATURES"""

# understanding the distribution for numerical variables
num_cols = ['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered','count']

fig, axis = plt.subplots(nrows=2, ncols=3, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(3):
        sns.histplot(df[num_cols[index]], ax=axis[row, col], kde=True)
        index += 1
        
plt.show()
sns.histplot(df[num_cols[-1]], kde=True) 
plt.show()

"""casual, registered and count somewhat looks like Log Normal Distrinution

temp, atemp and humidity looks like they follows the Normal Distribution

windspeed follows the binomial distribution

## OUTLIER DETECTION
"""

# plotting box plots to detect outliers in the data
num_cols = ['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered','count']
fig, axis = plt.subplots(nrows=2, ncols=3, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(3):
        sns.boxplot(x=df[num_cols[index]], ax=axis[row, col])
        index += 1
        
plt.show()
sns.boxplot(x=df[num_cols[-1]]) 
plt.show()

"""Looks like humidity, casual, registered and count have outliers in the data.

## OUTLIER TREATMENT
"""

data=df.copy()
num_cols = ['temp', 'atemp', 'humidity', 'windspeed', 'casual', 'registered','count']
fig, axis = plt.subplots(nrows=2, ncols=3, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(3):

      tenth_percentile = np.percentile(data[num_cols[index]], 10)
      ninetieth_percentile = np.percentile(data[num_cols[index]], 90)
      data[num_cols[index]]=data[num_cols[index]].map(lambda x:tenth_percentile if x<tenth_percentile else x).map(lambda x:ninetieth_percentile if x>ninetieth_percentile else x)
      sns.boxplot(x=data[num_cols[index]], ax=axis[row, col])
      index += 1
        
plt.show()
tenth_percentile = np.percentile(data[num_cols[-1]], 10)
ninetieth_percentile = np.percentile(data[num_cols[-1]], 90)
data[num_cols[-1]]=data[num_cols[-1]].map(lambda x:tenth_percentile if x<tenth_percentile else x).map(lambda x:ninetieth_percentile if x>ninetieth_percentile else x)
sns.boxplot(x=data[num_cols[-1]])

plt.show()

"""## UNIVARIATE ANALYSIS"""

# countplot of each categorical column
fig, axis = plt.subplots(nrows=2, ncols=2, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(2):
        sns.countplot(data=df, x=cat_cols[index], ax=axis[row, col])
        index += 1
        
plt.show()

"""Data looks common as it should be like equal number of days in each season, more working days and weather is mostly Clear, Few clouds, partly cloudy, partly cloudy.

## BIVARIATE ANALYSIS
"""

# plotting categorical variables againt count using boxplots
fig, axis = plt.subplots(nrows=2, ncols=2, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(2):
        sns.boxplot(data=df, x=cat_cols[index], y='count', ax=axis[row, col])
        index += 1
        
plt.show()

"""In summer and fall seasons more bikes are rented as compared to other seasons.

Whenever its a holiday more bikes are rented.
It is also clear from the workingday also that whenever day is holiday or weekend, slightly more bikes were rented.

Whenever there is rain, thunderstorm, snow or fog, there were less bikes were rented.
"""

# plotting numerical variables againt count using scatterplot
fig, axis = plt.subplots(nrows=2, ncols=3, figsize=(16, 12))

index = 0
for row in range(2):
    for col in range(3):
        sns.scatterplot(data=df, x=num_cols[index], y='count', ax=axis[row, col])
        index += 1
        
plt.show()

"""Whenever the humidity is less than 20, number of bikes rented is very very low.

Whenever the temperature is less than 10, number of bikes rented is less.

Whenever the windspeed is greater than 35, number of bikes rented is less.

## MULTIVARIATE ANALYSIS
"""

# understanding the correlation between count and numerical variables 
df.corr()['count']

sns.heatmap(df.corr(), annot=True)
plt.show()

"""count is mostly correlated to temp and atemp

## FINDING OUT THE CORRELATION BETWEEN TEMP, ATEMP, HUMIDITY, WIND SPEED  AND BICYCLE RENTED
"""

fig, axis = plt.subplots(nrows=2, ncols=2, figsize=(16, 12))
num_cols = ['temp', 'atemp', 'humidity', 'windspeed']
index = 0
for row in range(2):
    for col in range(2):
        sns.scatterplot(data=df, x=num_cols[index], y='count', ax=axis[row, col])
        index += 1
        
plt.show()

"""AS THE DATA NOT SEEMS TO BE  LINEAR SO UE CAN'T USE PEARSON TEST SO WE NEED TO USE SPEARMAN RANK CORRELATION

## SPEARMAN RANK CORRELATION

NULL HYPOTHISIS H0: TEMP,ATEMP,HUMIDITY,WINDSPEED AND BICYCLE RENT IS NOT CORRELATED

ALTERNATE HYPOTHISIS Ha: TEMP,ATEMP,HUMIDITY,WINDSPEED AND BICYCLE RENT IS  CORRELATED

SIGNIFICANCE (ALPHA) IS 0.05
"""

from scipy.stats import spearmanr
num_cols = ['temp', 'atemp', 'humidity', 'windspeed']
for i in num_cols:
  a=df[i].values
  count=df["count"].values
  coef, p_value = spearmanr(a, count)
  print ("spearman rank correlation test for {} and bicycle rent".format(i))
  print("spearman rank cofficent is :",coef)
  print("p value is :",p_value)
  if p_value<0.05:
    print("Reject null hypothisis ie {} and bicycle rent is correlated".format(i))
  else:
    print("Fail to reject null hypothisis {} and bicycle rent are not correlated".format(i))
  print("*"*100)

"""## Hypothesis Testing - 1 WEATHER IS DEPENDENT ON SEASON OR NOT

We will use chi-square test to test hypyothesis defined above as both season and wheather both are catagorical and mutualy exclusive data 

for chisqure test following assumption need to be true

Expected value of cells should be 5 or greater in at least 80% of cells.
"""

df1=df.copy()

df1.drop(index=[5631],inplace=True)

"""as wheather 4 contain only 1 data so it wont effect the statistical analysis so we can simply drop wheather 4 data"""

data_table = pd.crosstab(df1['season'], df['weather'])
print("Observed values:")
data_table

"""We will use chi-square test as both season and wheather are catagorical and mutualy exclusive and expected value of cells are 5 or greater in at least 80% of cells.

## CHI-SQURE TEST

Null Hypothesis (H0): Weather is independent of the season

Alternate Hypothesis (H1): Weather is not independent of the season

Significance level (alpha): 0.05
"""

from scipy import stats
val = stats.chi2_contingency(data_table)
expected_values = val[3]
expected_values

nrows, ncols = 4, 4
dof = (nrows-1)*(ncols-1)
print("degrees of freedom: ", dof)
alpha = 0.05


chi_sqr = sum([(o-e)**2/e for o, e in zip(data_table.values, expected_values)])
chi_sqr_statistic = chi_sqr[0] + chi_sqr[1]
print("chi-square test statistic: ", chi_sqr_statistic)

critical_val = stats.chi2.ppf(q=1-alpha, df=dof)
print(f"critical value: {critical_val}")

p_val = 1-stats.chi2.cdf(x=chi_sqr_statistic, df=dof)
print(f"p-value: {p_val}")

if p_val <= alpha:
    print("\nSince p-value is less than the alpha 0.05, We reject the Null Hypothesis. Meaning that Weather is dependent on the season.")
else:
    print("Since p-value is greater than the alpha 0.05, We do not reject the Null Hypothesis")

"""## Hypothesis Testing - 2 WORKING DAYS EFFECT ON  RENT OF BICYCLE OR NOT


"""

data_group1 = df[df['workingday']==0]['count'].values
data_group2 = df[df['workingday']==1]['count'].values

data_group1.mean(),data_group2.mean()

sns.boxplot(data=df,x='workingday',y="count")
plt.show()

"""from the above its look like both mean and median for working days and non working days are same but there need to be statistical significant of this assumption so run a TTest to prove the assumption

## T-TEST

Null Hypothesis H0: Working day has no effect on the number of cycles being rented. ie mean of non working days is equal to mean of non working days

Alternate Hypothesis Ha: Working day has effect on the number of cycles being rented. ie mean of non working days is not equal to mean of non working days

Significance level (alpha): 0.05

We will use the 2-Sample T-Test (two tailed) test
"""

t_stats,pvalue=stats.ttest_ind(data_group1,data_group2)
print("t_test statistics is :",t_stats)
print("p_value is :",pvalue)
if pvalue<0.05:
  print("Reject the Null Hypothisis ie  Working day has  effect on the number of cycles being rented")
else:
  print("Fail to reject null hypothisis ie Working day has no effect on the number of cycles being rented")

"""# Hypothesis Testing - 3 WEATHER HAS ANY EFFECT ON RENT OF BICYCLE OR NOT


"""

sns.boxplot(data=df1,x='weather',y="count")
plt.show()

"""looks like wheather has no effect on the rent of bicycle but for assurance let done the statistical test

Null Hypothesis: Number of cycles rented is similar in different weather. 

Alternate Hypothesis: Number of cycles rented is not similar in different weather.

Significance level (alpha): 0.05

Here, we will use the ANOVA test if the data is gaussian else use kruskal test 

let check data is gaussian or not

## DISTRIBUTION OF DATA
"""

plt.figure(figsize=(25,5))
for i in range(1,4):
  plt.subplot(1,3,i)
  sns.histplot(df1[df1['weather']==i]['count'].values,bins=100,kde=True)
  plt.title("weather {}".format(i))
  plt.subplots_adjust(hspace=5)

plt.show()

"""looks like data is not gaussian to confirm it let do QQtest

## QQ TEST
"""

from statsmodels.graphics.gofplots import qqplot
for i in range(1,4):
  qqplot(df1[df1['weather']==i]['count'].values,line="s")
  plt.title("weather {}".format(i))

"""from the above it is clear that data is not gaussian 

let check the transfromed data is gaussian or not if so the do ANOVA Test
"""

from scipy.stats import boxcox
plt.figure(figsize=(25,5))
for i in range(1,4):
  transfrom_data=boxcox(df1[df1['weather']==i]['count'].values)[0]
  plt.subplot(1,4,i)
  sns.histplot(transfrom_data,bins=100,kde=True)
  plt.title("weather {}".format(i))
  plt.subplots_adjust(hspace=5)

"""looks like data is not gaussian to assure this let run QQ test

## QQ TEST
"""

from scipy.stats import boxcox
for i in range(1,4):
  transfrom_data=boxcox(df1[df1['weather']==i]['count'].values)[0]
  qqplot(transfrom_data,line="s")
  plt.title("weather {}".format(i))

"""from QQ test we are not 100% sure that the transfromed data is gaussian or not so use SHAPIRO test

## SHAPIRO TEST

H0: Data is Gaussian

Ha: Data is not Gaussian
"""

from scipy.stats import shapiro
for i in range(1,4):
  transfrom_data=boxcox(df1[df1['weather']==i]['count'].values)[0]
  sample_data=np.random.choice(transfrom_data,size=100)
  test_stat,p_value=shapiro(sample_data)
  print("p_value for weather {} is {} :".format(i,p_value))
  if p_value<0.05:
    print("Reject H0 ie for weather {} data is not gaussian".format(i))
  else:
    print("Fail to reject H0 ie for weather {} data is gaussian".format(i))
  print("*"*100)

"""so the transformed data is not gaussian in all the groups

TO CHECK THE VARIANCE IN EATCH GROUP LETS DO LEVENE TEST

### LEVENE TEST

NULL HYPOTHISIS H0 : EATCH GROUP HAVE SAME VARIANCE

ALTERNATE HYPOTHISIS Ha : EATCH GROUP DOSE NOT HAVE SAME VARIANCE

SIGNIFICANCE (ALPHA) : 0.05
"""

from scipy.stats import levene
transfrom_data1=boxcox(df1[df1['weather']==1]['count'].values)[0]
transfrom_data2=boxcox(df1[df1['weather']==2]['count'].values)[0]
transfrom_data3=boxcox(df1[df1['weather']==3]['count'].values)[0]
test_stat,p_value=levene(transfrom_data1,transfrom_data1,transfrom_data3)
print("p_value is {} :".format(p_value))
if p_value<0.05:
  print("Reject H0 ie for eatch group variance is not same")
else:
  print("Fail to reject H0 ie for eatch group variance is same")

"""Aa the data is not is not gaussian and variance is not same IN eatch group so use KRUSKAL TEST

## KRUSKAL TEST

Null Hypothesis H0: Number of cycles rented is similar in different season.

Alternate Hypothesis Ha: Number of cycles rented is not similar in different season.

Significance (Alpha) : 0.05
"""

from scipy.stats import kruskal
gp1 = df1[df1['weather']==1]['count'].values
gp2 = df1[df1['weather']==2]['count'].values
gp3 = df1[df1['weather']==3]['count'].values

k_stat,p_value=kruskal( gp1, gp2, gp3)
print("kruskal statistics is :",k_stat)
print("p_value is {} :".format(p_value))
if p_value<0.05:
  print("Reject the Null Hypothisis ie  Number of cycles rented is not similar in different weather")
else:
  print("Fail to reject null hypothisis ie Number of cycles rented is similar in different weather.")

"""## Hypothesis Testing - 4 SEASON HAS ANY EFFECT ON RENT OF BICYCLE OR NOT


"""

sns.boxplot(data=df,x='season',y="count")
plt.show()

"""looks like season has no effect on the rent of bicycle but for assurance let done the statistical test

Null Hypothesis: Number of cycles rented is similar in different  season.

Alternate Hypothesis: Number of cycles rented is not similar in different season.

Significance level (alpha): 0.05

Here, we will use the ANOVA if the data will Gaussian else use KRUSKAL test

let check whether data is Gaussian or not

## DISTRIBUTION OF DATA
"""

plt.figure(figsize=(25,5))
for i in range(1,5):
  plt.subplot(1,4,i)
  sns.histplot(df[df['season']==i]['count'].values,bins=100,kde=True)
  plt.title("season {}".format(i))
  plt.subplots_adjust(hspace=5)

plt.show()

"""data was not gaussian"""

from statsmodels.graphics.gofplots import qqplot
for i in range(1,5):
  qqplot(df[df['season']==i]['count'].values,line="s")
  plt.title("season {}".format(i))

"""DATA is is not Gaussian so let transfrom the data 

"""

from scipy.stats import boxcox
plt.figure(figsize=(25,5))
for i in range(1,5):
  transfrom_data=boxcox(df[df['season']==i]['count'].values)[0]
  plt.subplot(1,4,i)
  sns.histplot(transfrom_data,bins=100,kde=True)
  plt.title("season {}".format(i))
  plt.subplots_adjust(hspace=5)

"""transformed data is also not gaussian to confirm further lets do qq test

## QQ TEST
"""

from scipy.stats import boxcox
for i in range(1,5):
  transfrom_data=boxcox(df[df['season']==i]['count'].values)[0]
  qqplot(transfrom_data,line="s")
  plt.title("season {}".format(i))

"""Looks like Transfromed data is also not Gaussian so for further justify the statement use use Shapiro test

## Shapiro test 
H0: Data is Gaussian

Ha: Data is not Gaussian

Significance(Alpha) : 0.05
"""

from scipy.stats import shapiro
for i in range(1,5):
  transfrom_data=boxcox(df[df['season']==i]['count'].values)[0]
  sample_data=np.random.choice(transfrom_data,size=100)
  test_stat,p_value=shapiro(sample_data)
  print("p_value for season {} is {} :".format(i,p_value))
  if p_value<0.05:
    print("Reject H0 ie for season {} data is not gaussian".format(i))
  else:
    print("Fail to reject H0 ie for season {} data is gaussian".format(i))
  print("*"*100)

"""so the Data is not Gaussian in eatch group

## TO CHECK THE VARIANCE IN EATCH GROUP LETS DO LEVENE TEST

### LEVENE TEST

NULL HYPOTHISIS H0 : EATCH GROUP HAVE SAME VARIANCE

ALTERNATE HYPOTHISIS Ha : EATCH GROUP DOSE NOT HAVE SAME VARIANCE

SIGNIFICANCE (ALPHA) : 0.05
"""

from scipy.stats import levene
transfrom_data1=boxcox(df[df['season']==1]['count'].values)[0]
transfrom_data2=boxcox(df[df['season']==2]['count'].values)[0]
transfrom_data3=boxcox(df[df['season']==3]['count'].values)[0]
transfrom_data4=boxcox(df[df['season']==4]['count'].values)[0]
test_stat,p_value=levene(transfrom_data1,transfrom_data1,transfrom_data3,transfrom_data4)
print("p_value is {} :".format(p_value))
if p_value<0.05:
  print("Reject H0 ie for eatch group variance is not same")
else:
  print("Fail to reject H0 ie for eatch group variance is same")

"""As the Transfromed data is not Gaussian and variance in eatch group is not same  so use KRUSKAL TEST

## KRUSKAL TEST
Null Hypothesis H0: Number of cycles rented is similar in different season.

Alternate Hypothesis Ha: Number of cycles rented is not similar in different season.
"""

from scipy.stats import kruskal
gp5 = df[df['season']==1]['count'].values
gp6 = df[df['season']==2]['count'].values
gp7 = df[df['season']==3]['count'].values
gp8 = df[df['season']==4]['count'].values
k_stat,p_value=kruskal( gp5, gp6, gp7, gp8)
print("k_stat is :",k_stat)
print("p_value is :",p_value)
if p_value<0.05:
  print("Reject the Null Hypothisis ie  Number of cycles rented is not similar in different season")
else:
  print("Fail to reject null hypothisis ie Number of cycles rented is similar in different season.")